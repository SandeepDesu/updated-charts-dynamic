import { OnInit, OnDestroy } from '@angular/core';
import { IbaseBuilder } from '../DataBuilders';
/**
 * Base functionality for the display components
 * This is where you handle the specific of displaying the data which was formatted in the Source/builder
 */
export interface IDisplayComponent {
    /**
     * a builder class which handles the API return and builds out the correct data
     */
    Source: IbaseBuilder;
    /**
     * Data that has been returned from the API and formatted by the Source object
     */
    /**
     *  The display name of this instance of the component
     */
    getName(): string;
    /**
     * calling this will hide the component
     */
    Hide(): void;
    /**
     * calling this will show/unhide the component
     */
    Show(): void;
}
/**
 * Base implementation for custom components.  This class will handle the API source interaction and give
 * the child class a fresh data object after init
 *
 * Do component specific tasks in the postLoad() function
 *
 */
export declare abstract class DisplayComponent<T extends IbaseBuilder> implements IDisplayComponent, OnInit, OnDestroy {
    Source: T;
    data: any;
    protected Hidden: boolean;
    constructor();
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * This funciton is called from ngOnInit.  it will call the API via Source.getData, set the data,
     * then call postLoad() - implement custom handling in the postLoad() function
     *
     */
    protected loadData(): void;
    /**
     * implement this to handle specific data loading in the component
     */
    protected abstract postLoad(): void;
    Hide(): void;
    Show(): void;
    getName(): string;
}
